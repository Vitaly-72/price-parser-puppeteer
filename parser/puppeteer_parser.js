const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const { PRODUCTS_CONFIG, PARSER_CONFIG } = require('./config');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
function extractPrice(text) {
    if (!text) return null;
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç–æ–π
    const cleaned = text.replace(/[^\d,.]/g, '').replace(',', '.');
    
    // –ò—â–µ–º —á–∏—Å–ª–∞
    const numbers = cleaned.match(/\d+\.?\d*/);
    return numbers ? parseFloat(numbers[0]) : null;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
async function parsePrice(url, selector) {
    console.log(`üîÑ –ü–∞—Ä—Å–∏–º: ${url}`);
    
    const browser = await puppeteer.launch({
        headless: 'new',
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-web-security',
            '--disable-features=IsolateOrigins,site-per-process',
            '--user-agent=' + PARSER_CONFIG.userAgent,
            '--window-size=1920,1080'
        ]
    });

    try {
        const page = await browser.newPage();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await page.setBypassCSP(true);
        await page.setUserAgent(PARSER_CONFIG.userAgent);
        await page.setViewport({ width: 1920, height: 1080 });

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        console.log(`üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);
        await page.goto(url, { 
            waitUntil: 'networkidle2', 
            timeout: PARSER_CONFIG.timeout 
        });

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        console.log(`‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏...`);
        await page.waitForTimeout(PARSER_CONFIG.waitTime);

        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
        console.log(`üîç –ò—â–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector}`);
        const element = await page.$(selector);
        
        if (!element) {
            console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return null;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
        const priceText = await page.evaluate(el => el.textContent, element);
        console.log(`üìÑ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç: "${priceText}"`);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
        const price = extractPrice(priceText);
        console.log(price ? `‚úÖ –¶–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: ${price}` : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É');

        return price;

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${url}:`, error.message);
        return null;
    } finally {
        await browser.close();
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Puppeteer –ø–∞—Ä—Å–µ—Ä–∞...');
    console.log('========================================');

    const results = {
        last_updated: new Date().toISOString(),
        products: {}
    };

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const resultsDir = path.join(__dirname, '../results');
    if (!fs.existsSync(resultsDir)) {
        fs.mkdirSync(resultsDir, { recursive: true });
    }

    // –ü–∞—Ä—Å–∏–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    for (const [category, products] of Object.entries(PRODUCTS_CONFIG)) {
        results.products[category] = {};
        
        for (const [productName, sources] of Object.entries(products)) {
            results.products[category][productName] = {};
            
            console.log(`\nüì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category} -> ${productName}`);
            console.log('----------------------------------------');

            for (let i = 0; i < sources.length; i++) {
                const source = sources[i];
                const domain = new URL(source.url).hostname;
                const sourceKey = `${domain}_${i}`;

                console.log(`\nüîó URL: ${source.url}`);
                console.log(`üéØ –°–µ–ª–µ–∫—Ç–æ—Ä: ${source.selector}`);

                const price = await parsePrice(source.url, source.selector);
                
                results.products[category][productName][sourceKey] = {
                    price: price,
                    url: source.url,
                    selector: source.selector,
                    success: price !== null,
                    timestamp: new Date().toISOString()
                };

                console.log(price !== null ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å');
            }
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const outputPath = path.join(resultsDir, 'prices.json');
    fs.writeFileSync(outputPath, JSON.stringify(results, null, 2));
    
    console.log('\n========================================');
    console.log('üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    let total = 0;
    let success = 0;

    for (const category of Object.values(results.products)) {
        for (const product of Object.values(category)) {
            for (const item of Object.values(product)) {
                total++;
                if (item.success) success++;
            }
        }
    }

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${success}/${total} —É—Å–ø–µ—à–Ω–æ`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    process.exit(1);
});

// –ó–∞–ø—É—Å–∫
main().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});
